from collections import OrderedDict

def make_everything(file, plot_save_folder, table_save_folder, table_caption, table_label):

	# {'N-Gram': {'Algorithm' : {'Feature': Value}}}
	results = OrderedDict()

	with open(file, 'r') as f:
		for line in f:
			if line.startswith('Algorithm'):
				try:
					algorithm = line.replace('Algorithm: ', '').strip()
					n_gram = int(next(f).replace('-gram', '').strip())

					line = next(f)
					if line.startswith('Feature Selection Applied'):
						line = next(f)

					k_folds = float(line.replace('K-Folds: ', '').strip())
					total_samples = float(next(f).replace('Total Samples: ', '').strip())
					total_malicious_samples = float(next(f).replace('Total Malicious Samples: ', '').strip())
					total_benign_samples = float(next(f).replace('Total Benign Samples: ', '').strip())
					total_features = int(next(f).replace('Total Features: ', '').strip())
					tp = float(next(f).replace('True Positive: ', '').strip())
					fp = float(next(f).replace('False Positive: ', '').strip())
					tn = float(next(f).replace('True Negative: ', '').strip())
					fn = float(next(f).replace('False Negative: ', '').strip())
					recall = float(next(f).replace('Recall: ', '').strip())
					precision = float(next(f).replace('Precision: ', '').strip())
					f1 = float(next(f).replace('F1 Score: ', '').strip())

					if n_gram not in results:
						results[n_gram] = OrderedDict()

					if algorithm not in results[n_gram]:
						results[n_gram][algorithm] = {
							'N-Gram': [],
							'Algorithm': [], 
							'K-Folds': [],
							'Total Samples': [],
							'Total Malicious Samples': [],
							'Total Benign Samples': [],
							'Total Features': [],
							'True Positive': [],
							'False Positive': [],
							'True Negative': [],
							'False Negative': [],
							'Recall': [],
							'Precision': [],
							'F1': []}

					results[n_gram][algorithm]['N-Gram'] = n_gram
					results[n_gram][algorithm]['Algorithm'] = algorithm
					results[n_gram][algorithm]['K-Folds'] = k_folds
					results[n_gram][algorithm]['Total Samples'] = total_samples
					results[n_gram][algorithm]['Total Malicious Samples'] = total_malicious_samples
					results[n_gram][algorithm]['Total Benign Samples'] = total_benign_samples
					results[n_gram][algorithm]['Total Features'] = total_features
					results[n_gram][algorithm]['True Positive'] = (tp * 10 * 100) / 15000
					results[n_gram][algorithm]['False Positive'] = (fp * 10 * 100) / 15000
					results[n_gram][algorithm]['True Negative'] = (tn * 10 * 100) / 15000
					results[n_gram][algorithm]['False Negative'] = (fn * 10 * 100) / 15000
					results[n_gram][algorithm]['Recall'] = recall
					results[n_gram][algorithm]['Precision'] = precision
					results[n_gram][algorithm]['F1'] = f1
				except Exception as e:
					print(e)


	#################### PLOTS ####################
	import matplotlib.pyplot as plt; plt.rcdefaults()
	import numpy as np
	import matplotlib.pyplot as plt

	from statistics import mean

	for n, result in results.items():
		algorithms = []
		recall = []
		precision = []
		f1 = []

		for algorithm, values in result.items():
			algorithms.append(algorithm)
			recall.append(values['Recall'])
			precision.append(values['Precision'])
			f1.append(values['F1'])


		y_pos = np.arange(len(algorithms))

		new_algorithms = []
		for al in algorithms:
			new_algorithms.append(al.replace(' ', '\n'))
		algorithms = new_algorithms

		plt.bar(y_pos, recall, align='center', alpha=0.5)
		plt.xticks(y_pos, algorithms)
		plt.xlabel('Algorithm')
		plt.ylabel('Recall')
		plt.title('{}-Gram Recall'.format(n))
		plt.savefig('{}/{}-gram_recall.pdf'.format(plot_save_folder, n))
		plt.clf()

		plt.bar(y_pos, precision, align='center', alpha=0.5)
		plt.xticks(y_pos, algorithms)
		plt.xlabel('Algorithm')
		plt.ylabel('Precision')
		plt.title('{}-Gram Precision'.format(n))
		plt.savefig('{}/{}-gram_precision.pdf'.format(plot_save_folder, n))
		plt.clf()

		#fig, ax = plt.subplots()

		plt.bar(y_pos, f1, align='center', alpha=0.5)
		plt.xticks(y_pos, algorithms)
		plt.xlabel('Algorithm')
		plt.ylabel('F1 Score')
		plt.title('{}-Gram F1'.format(n))

		'''
		for i, v in enumerate(f1):
			ax.text(i, v + 0.01, '{:.4}'.format(v), color='black', fontweight='bold', va='center')
		'''

		plt.savefig('{}/{}-gram_f1.pdf'.format(plot_save_folder, n))
		plt.clf()
	###############################################


	################### Tables ####################
	# Table making
	table_folder = '/home/drc/Desktop/Research/grammar_malware_analysis/antlr/tables/super_trimmed_feature_selected'

	# Column order:
	col_order = ['N-Gram', 'Algorithm', 'Total Features', 'True Positive', 'False Positive', 
		'True Negative', 'False Negative', 'Recall', 'Precision', 'F1']

	table_begin = '''\\begin{center}
\\begin{table}[htbp]
\\resizebox{\\textwidth}{!}{%
\\begin{tabular}{| c | c | c | c | c | c | c | c | c | c |}
\\hline
N-Gram	& Algorithm	& Total Features	& True Positive \\%	& False Positive \\%	& True Negative \\%	& False Negative \\%	& Recall	& Precision	& F1 \\\\
\\hline \\hline
'''

	table_end = '''\\end{tabular}}
\\caption{''' + table_caption + '''}
\\label{table:''' + table_label + '''}
\\end{table}
\\end{center}
'''

	with open(table_save_folder, 'w') as f:
		#f.write('{}\n'.format(col_order))
		f.write(table_begin)
		for n, result in results.items():
			for algorithm, value, in result.items():
				for col in col_order:
					if type(value[col]) != str:
						f.write('{} \t'.format(round(value[col], 4)))
					else:
						f.write('{} \t'.format(value[col]))
					if col != 'F1':
						f.write('& \t')

				f.write('\t \\\\\n\\hline\n')
		f.write(table_end)
	###############################################



if __name__ == '__main__':
	import os

	file_dir = '/home/drc/Desktop/Research/grammar_malware_analysis/antlr/results/final_results/'
	plot_dir = '/home/drc/Desktop/Research/grammar_malware_analysis/antlr/plots/'
	table_dir = '/home/drc/Desktop/Research/grammar_malware_analysis/antlr/paper/tables/'

	extra = ['full', 'full_feature_selectiond', 'super_trimmed', 'super_trimmed_feature_selected', 'trimmed', 'trimmed_feature_selected']

	table_caption = ['Full Feature', 'Full Feature - Feature Selection', 'Extra Trimmed Features', 
		'Extra Trimmed Features - Feature Selection', 'Trimmed Features', 'Trimmed Features - Feature Selection']
	
	table_label = ['full', 'full_feature_selectiond', 'extra_trimmed', 'extra_trimmed_feature_selected', 'trimmed', 'trimmed_feature_selected']

	for i, cap, lab in zip(extra, table_caption, table_label):
		plot_path = plot_dir + i

		if not os.path.exists(plot_path):
			os.makedirs(plot_path)
		if not os.path.exists(table_dir):
			os.makedirs(table_dir)

		
		table_path = table_dir + i + '_table.tex'
		file = file_dir + i + '.txt'

		make_everything(file, plot_path, table_path, cap, lab)

