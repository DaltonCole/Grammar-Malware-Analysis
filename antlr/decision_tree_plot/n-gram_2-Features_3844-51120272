digraph Tree {
node [shape=box] ;
0 [label="expression_statement-objectliteral <= 0.5\ngini = 0.5\nsamples = 27000\nvalue = [13530, 13470]\nclass = Benign"] ;
1 [label="literal-arguments <= 0.5\ngini = 0.389\nsamples = 16202\nvalue = [4277, 11925]\nclass = Malicious"] ;
0 -> 1 [labeldistance=2.5, labelangle=45, headlabel="True"] ;
2 [label="identifiername-identifiername <= 0.5\ngini = 0.472\nsamples = 11170\nvalue = [4271, 6899]\nclass = Malicious"] ;
1 -> 2 ;
3 [label="expression_statement-arguments <= 0.5\ngini = 0.436\nsamples = 10144\nvalue = [3252, 6892]\nclass = Malicious"] ;
2 -> 3 ;
4 [label="expression_statement-identifiername <= 0.5\ngini = 0.494\nsamples = 5509\nvalue = [2454, 3055]\nclass = Malicious"] ;
3 -> 4 ;
5 [label="varmodifier-variabledeclarationlist <= 0.5\ngini = 0.465\nsamples = 4482\nvalue = [1645, 2837]\nclass = Malicious"] ;
4 -> 5 ;
6 [label="functionbody-sourceelements <= 0.5\ngini = 0.396\nsamples = 3259\nvalue = [885, 2374]\nclass = Malicious"] ;
5 -> 6 ;
7 [label="statement-expressionstatement <= 0.5\ngini = 0.436\nsamples = 2761\nvalue = [885, 1876]\nclass = Malicious"] ;
6 -> 7 ;
8 [label="gini = 0.399\nsamples = 2586\nvalue = [712, 1874]\nclass = Malicious"] ;
7 -> 8 ;
9 [label="arguments-eos <= 0.5\ngini = 0.023\nsamples = 175\nvalue = [173, 2]\nclass = Benign"] ;
7 -> 9 ;
10 [label="gini = 0.0\nsamples = 173\nvalue = [173, 0]\nclass = Benign"] ;
9 -> 10 ;
11 [label="gini = 0.0\nsamples = 2\nvalue = [0, 2]\nclass = Malicious"] ;
9 -> 11 ;
12 [label="gini = 0.0\nsamples = 498\nvalue = [0, 498]\nclass = Malicious"] ;
6 -> 12 ;
13 [label="arguments-expression_statement <= 0.5\ngini = 0.471\nsamples = 1223\nvalue = [760, 463]\nclass = Benign"] ;
5 -> 13 ;
14 [label="gini = 0.0\nsamples = 760\nvalue = [760, 0]\nclass = Benign"] ;
13 -> 14 ;
15 [label="gini = 0.0\nsamples = 463\nvalue = [0, 463]\nclass = Malicious"] ;
13 -> 15 ;
16 [label="numericliteral-eos <= 0.5\ngini = 0.334\nsamples = 1027\nvalue = [809, 218]\nclass = Benign"] ;
4 -> 16 ;
17 [label="gini = 0.0\nsamples = 638\nvalue = [638, 0]\nclass = Benign"] ;
16 -> 17 ;
18 [label="variablestatement-varmodifier <= 0.5\ngini = 0.493\nsamples = 389\nvalue = [171, 218]\nclass = Malicious"] ;
16 -> 18 ;
19 [label="gini = 0.0\nsamples = 136\nvalue = [136, 0]\nclass = Benign"] ;
18 -> 19 ;
20 [label="arguments-expression_statement <= 0.5\ngini = 0.238\nsamples = 253\nvalue = [35, 218]\nclass = Malicious"] ;
18 -> 20 ;
21 [label="gini = 0.0\nsamples = 18\nvalue = [18, 0]\nclass = Benign"] ;
20 -> 21 ;
22 [label="literal-expression_statement <= 0.5\ngini = 0.134\nsamples = 235\nvalue = [17, 218]\nclass = Malicious"] ;
20 -> 22 ;
23 [label="identifiername-expression_statement <= 0.5\ngini = 0.018\nsamples = 220\nvalue = [2, 218]\nclass = Malicious"] ;
22 -> 23 ;
24 [label="gini = 0.0\nsamples = 218\nvalue = [0, 218]\nclass = Malicious"] ;
23 -> 24 ;
25 [label="gini = 0.0\nsamples = 2\nvalue = [2, 0]\nclass = Benign"] ;
23 -> 25 ;
26 [label="gini = 0.0\nsamples = 15\nvalue = [15, 0]\nclass = Benign"] ;
22 -> 26 ;
27 [label="variabledeclaration-expression_statement <= 0.5\ngini = 0.285\nsamples = 4635\nvalue = [798, 3837]\nclass = Malicious"] ;
3 -> 27 ;
28 [label="literal-expression_statement <= 0.5\ngini = 0.483\nsamples = 1052\nvalue = [622, 430]\nclass = Benign"] ;
27 -> 28 ;
29 [label="expression_statement-functionbody <= 0.5\ngini = 0.433\nsamples = 630\nvalue = [200, 430]\nclass = Malicious"] ;
28 -> 29 ;
30 [label="expression_statement-eos <= 0.5\ngini = 0.361\nsamples = 563\nvalue = [133, 430]\nclass = Malicious"] ;
29 -> 30 ;
31 [label="arguments-identifiername <= 0.5\ngini = 0.491\nsamples = 308\nvalue = [133, 175]\nclass = Malicious"] ;
30 -> 31 ;
32 [label="gini = 0.0\nsamples = 127\nvalue = [127, 0]\nclass = Benign"] ;
31 -> 32 ;
33 [label="literal-eos <= 0.5\ngini = 0.064\nsamples = 181\nvalue = [6, 175]\nclass = Malicious"] ;
31 -> 33 ;
34 [label="gini = 0.0\nsamples = 6\nvalue = [6, 0]\nclass = Benign"] ;
33 -> 34 ;
35 [label="gini = 0.0\nsamples = 175\nvalue = [0, 175]\nclass = Malicious"] ;
33 -> 35 ;
36 [label="gini = 0.0\nsamples = 255\nvalue = [0, 255]\nclass = Malicious"] ;
30 -> 36 ;
37 [label="gini = 0.0\nsamples = 67\nvalue = [67, 0]\nclass = Benign"] ;
29 -> 37 ;
38 [label="gini = 0.0\nsamples = 422\nvalue = [422, 0]\nclass = Benign"] ;
28 -> 38 ;
39 [label="expression_statement-functionbody <= 0.5\ngini = 0.093\nsamples = 3583\nvalue = [176, 3407]\nclass = Malicious"] ;
27 -> 39 ;
40 [label="expressionstatement-expressionsequence <= 0.5\ngini = 0.053\nsamples = 3333\nvalue = [90, 3243]\nclass = Malicious"] ;
39 -> 40 ;
41 [label="statement-ifstatement <= 0.5\ngini = 0.124\nsamples = 15\nvalue = [14, 1]\nclass = Benign"] ;
40 -> 41 ;
42 [label="gini = 0.0\nsamples = 14\nvalue = [14, 0]\nclass = Benign"] ;
41 -> 42 ;
43 [label="gini = 0.0\nsamples = 1\nvalue = [0, 1]\nclass = Malicious"] ;
41 -> 43 ;
44 [label="arguments-expression_statement <= 0.5\ngini = 0.045\nsamples = 3318\nvalue = [76, 3242]\nclass = Malicious"] ;
40 -> 44 ;
45 [label="gini = 0.0\nsamples = 6\nvalue = [6, 0]\nclass = Benign"] ;
44 -> 45 ;
46 [label="eos-arguments <= 0.5\ngini = 0.041\nsamples = 3312\nvalue = [70, 3242]\nclass = Malicious"] ;
44 -> 46 ;
47 [label="literal-expression_statement <= 0.5\ngini = 0.038\nsamples = 3305\nvalue = [64, 3241]\nclass = Malicious"] ;
46 -> 47 ;
48 [label="expression_statement-identifiername <= 0.5\ngini = 0.227\nsamples = 291\nvalue = [38, 253]\nclass = Malicious"] ;
47 -> 48 ;
49 [label="assignmentoperator-expression_statement <= 0.5\ngini = 0.436\nsamples = 53\nvalue = [36, 17]\nclass = Benign"] ;
48 -> 49 ;
50 [label="arguments-identifiername <= 0.5\ngini = 0.053\nsamples = 37\nvalue = [36, 1]\nclass = Benign"] ;
49 -> 50 ;
51 [label="gini = 0.0\nsamples = 36\nvalue = [36, 0]\nclass = Benign"] ;
50 -> 51 ;
52 [label="gini = 0.0\nsamples = 1\nvalue = [0, 1]\nclass = Malicious"] ;
50 -> 52 ;
53 [label="gini = 0.0\nsamples = 16\nvalue = [0, 16]\nclass = Malicious"] ;
49 -> 53 ;
54 [label="variabledeclaration-eos <= 0.5\ngini = 0.017\nsamples = 238\nvalue = [2, 236]\nclass = Malicious"] ;
48 -> 54 ;
55 [label="literal-numericliteral <= 0.5\ngini = 0.008\nsamples = 237\nvalue = [1, 236]\nclass = Malicious"] ;
54 -> 55 ;
56 [label="gini = 0.0\nsamples = 1\nvalue = [1, 0]\nclass = Benign"] ;
55 -> 56 ;
57 [label="gini = 0.0\nsamples = 236\nvalue = [0, 236]\nclass = Malicious"] ;
55 -> 57 ;
58 [label="gini = 0.0\nsamples = 1\nvalue = [1, 0]\nclass = Benign"] ;
54 -> 58 ;
59 [label="statement-withstatement <= 0.5\ngini = 0.017\nsamples = 3014\nvalue = [26, 2988]\nclass = Malicious"] ;
47 -> 59 ;
60 [label="identifiername-expression_statement <= 0.5\ngini = 0.016\nsamples = 3013\nvalue = [25, 2988]\nclass = Malicious"] ;
59 -> 60 ;
61 [label="eos-catchproduction <= 0.5\ngini = 0.009\nsamples = 2884\nvalue = [13, 2871]\nclass = Malicious"] ;
60 -> 61 ;
62 [label="expression_statement-assignmentoperator <= 0.5\ngini = 0.008\nsamples = 2882\nvalue = [12, 2870]\nclass = Malicious"] ;
61 -> 62 ;
63 [label="identifiername-eos <= 0.5\ngini = 0.008\nsamples = 2879\nvalue = [11, 2868]\nclass = Malicious"] ;
62 -> 63 ;
64 [label="numericliteral-eos <= 0.5\ngini = 0.007\nsamples = 2876\nvalue = [10, 2866]\nclass = Malicious"] ;
63 -> 64 ;
65 [label="statement-block <= 0.5\ngini = 0.014\nsamples = 1460\nvalue = [10, 1450]\nclass = Malicious"] ;
64 -> 65 ;
66 [label="expression_statement-identifiername <= 0.5\ngini = 0.008\nsamples = 1456\nvalue = [6, 1450]\nclass = Malicious"] ;
65 -> 66 ;
67 [label="expression_statement-eos <= 0.5\ngini = 0.002\nsamples = 1053\nvalue = [1, 1052]\nclass = Malicious"] ;
66 -> 67 ;
68 [label="gini = 0.003\nsamples = 682\nvalue = [1, 681]\nclass = Malicious"] ;
67 -> 68 ;
69 [label="gini = 0.0\nsamples = 371\nvalue = [0, 371]\nclass = Malicious"] ;
67 -> 69 ;
70 [label="returnstatement-expressionsequence <= 0.5\ngini = 0.025\nsamples = 403\nvalue = [5, 398]\nclass = Malicious"] ;
66 -> 70 ;
71 [label="gini = 0.0\nsamples = 5\nvalue = [5, 0]\nclass = Benign"] ;
70 -> 71 ;
72 [label="gini = 0.0\nsamples = 398\nvalue = [0, 398]\nclass = Malicious"] ;
70 -> 72 ;
73 [label="gini = 0.0\nsamples = 4\nvalue = [4, 0]\nclass = Benign"] ;
65 -> 73 ;
74 [label="gini = 0.0\nsamples = 1416\nvalue = [0, 1416]\nclass = Malicious"] ;
64 -> 74 ;
75 [label="ifstatement-expressionsequence <= 0.5\ngini = 0.444\nsamples = 3\nvalue = [1, 2]\nclass = Malicious"] ;
63 -> 75 ;
76 [label="gini = 0.0\nsamples = 1\nvalue = [1, 0]\nclass = Benign"] ;
75 -> 76 ;
77 [label="gini = 0.0\nsamples = 2\nvalue = [0, 2]\nclass = Malicious"] ;
75 -> 77 ;
78 [label="emptystatement-sourceelement <= 0.5\ngini = 0.444\nsamples = 3\nvalue = [1, 2]\nclass = Malicious"] ;
62 -> 78 ;
79 [label="gini = 0.0\nsamples = 1\nvalue = [1, 0]\nclass = Benign"] ;
78 -> 79 ;
80 [label="gini = 0.0\nsamples = 2\nvalue = [0, 2]\nclass = Malicious"] ;
78 -> 80 ;
81 [label="returnstatement-expressionsequence <= 0.5\ngini = 0.5\nsamples = 2\nvalue = [1, 1]\nclass = Benign"] ;
61 -> 81 ;
82 [label="gini = 0.0\nsamples = 1\nvalue = [1, 0]\nclass = Benign"] ;
81 -> 82 ;
83 [label="gini = 0.0\nsamples = 1\nvalue = [0, 1]\nclass = Malicious"] ;
81 -> 83 ;
84 [label="eos-statement <= 0.5\ngini = 0.169\nsamples = 129\nvalue = [12, 117]\nclass = Malicious"] ;
60 -> 84 ;
85 [label="returnstatement-expressionsequence <= 0.5\ngini = 0.26\nsamples = 13\nvalue = [11, 2]\nclass = Benign"] ;
84 -> 85 ;
86 [label="gini = 0.0\nsamples = 11\nvalue = [11, 0]\nclass = Benign"] ;
85 -> 86 ;
87 [label="gini = 0.0\nsamples = 2\nvalue = [0, 2]\nclass = Malicious"] ;
85 -> 87 ;
88 [label="expression_statement-expressionsequence <= 0.5\ngini = 0.017\nsamples = 116\nvalue = [1, 115]\nclass = Malicious"] ;
84 -> 88 ;
89 [label="gini = 0.0\nsamples = 1\nvalue = [1, 0]\nclass = Benign"] ;
88 -> 89 ;
90 [label="gini = 0.0\nsamples = 115\nvalue = [0, 115]\nclass = Malicious"] ;
88 -> 90 ;
91 [label="gini = 0.0\nsamples = 1\nvalue = [1, 0]\nclass = Benign"] ;
59 -> 91 ;
92 [label="returnstatement-expressionsequence <= 0.5\ngini = 0.245\nsamples = 7\nvalue = [6, 1]\nclass = Benign"] ;
46 -> 92 ;
93 [label="gini = 0.0\nsamples = 6\nvalue = [6, 0]\nclass = Benign"] ;
92 -> 93 ;
94 [label="gini = 0.0\nsamples = 1\nvalue = [0, 1]\nclass = Malicious"] ;
92 -> 94 ;
95 [label="assignmentoperator-expression_statement <= 0.5\ngini = 0.451\nsamples = 250\nvalue = [86, 164]\nclass = Malicious"] ;
39 -> 95 ;
96 [label="emptystatement-eos <= 0.5\ngini = 0.024\nsamples = 84\nvalue = [83, 1]\nclass = Benign"] ;
95 -> 96 ;
97 [label="gini = 0.0\nsamples = 83\nvalue = [83, 0]\nclass = Benign"] ;
96 -> 97 ;
98 [label="gini = 0.0\nsamples = 1\nvalue = [0, 1]\nclass = Malicious"] ;
96 -> 98 ;
99 [label="formalparameterarg-formalparameterarg <= 0.5\ngini = 0.035\nsamples = 166\nvalue = [3, 163]\nclass = Malicious"] ;
95 -> 99 ;
100 [label="literal-eos <= 0.5\ngini = 0.012\nsamples = 163\nvalue = [1, 162]\nclass = Malicious"] ;
99 -> 100 ;
101 [label="gini = 0.0\nsamples = 1\nvalue = [1, 0]\nclass = Benign"] ;
100 -> 101 ;
102 [label="gini = 0.0\nsamples = 162\nvalue = [0, 162]\nclass = Malicious"] ;
100 -> 102 ;
103 [label="statement-emptystatement <= 0.5\ngini = 0.444\nsamples = 3\nvalue = [2, 1]\nclass = Benign"] ;
99 -> 103 ;
104 [label="gini = 0.0\nsamples = 2\nvalue = [2, 0]\nclass = Benign"] ;
103 -> 104 ;
105 [label="gini = 0.0\nsamples = 1\nvalue = [0, 1]\nclass = Malicious"] ;
103 -> 105 ;
106 [label="breakstatement-eos <= 0.5\ngini = 0.014\nsamples = 1026\nvalue = [1019, 7]\nclass = Benign"] ;
2 -> 106 ;
107 [label="expression_statement-assignmentoperator <= 0.5\ngini = 0.004\nsamples = 1021\nvalue = [1019, 2]\nclass = Benign"] ;
106 -> 107 ;
108 [label="numericliteral-expression_statement <= 0.5\ngini = 0.002\nsamples = 1018\nvalue = [1017, 1]\nclass = Benign"] ;
107 -> 108 ;
109 [label="gini = 0.0\nsamples = 915\nvalue = [915, 0]\nclass = Benign"] ;
108 -> 109 ;
110 [label="literal-expression_statement <= 0.5\ngini = 0.019\nsamples = 103\nvalue = [102, 1]\nclass = Benign"] ;
108 -> 110 ;
111 [label="ifstatement-expressionsequence <= 0.5\ngini = 0.444\nsamples = 3\nvalue = [2, 1]\nclass = Benign"] ;
110 -> 111 ;
112 [label="gini = 0.0\nsamples = 2\nvalue = [2, 0]\nclass = Benign"] ;
111 -> 112 ;
113 [label="gini = 0.0\nsamples = 1\nvalue = [0, 1]\nclass = Malicious"] ;
111 -> 113 ;
114 [label="gini = 0.0\nsamples = 100\nvalue = [100, 0]\nclass = Benign"] ;
110 -> 114 ;
115 [label="literal-statement <= 0.5\ngini = 0.444\nsamples = 3\nvalue = [2, 1]\nclass = Benign"] ;
107 -> 115 ;
116 [label="gini = 0.0\nsamples = 1\nvalue = [0, 1]\nclass = Malicious"] ;
115 -> 116 ;
117 [label="gini = 0.0\nsamples = 2\nvalue = [2, 0]\nclass = Benign"] ;
115 -> 117 ;
118 [label="gini = 0.0\nsamples = 5\nvalue = [0, 5]\nclass = Malicious"] ;
106 -> 118 ;
119 [label="eos-arguments <= 0.5\ngini = 0.002\nsamples = 5032\nvalue = [6, 5026]\nclass = Malicious"] ;
1 -> 119 ;
120 [label="arguments-expression_statement <= 0.5\ngini = 0.001\nsamples = 5029\nvalue = [3, 5026]\nclass = Malicious"] ;
119 -> 120 ;
121 [label="gini = 0.0\nsamples = 2\nvalue = [2, 0]\nclass = Benign"] ;
120 -> 121 ;
122 [label="literal-eos <= 0.5\ngini = 0.0\nsamples = 5027\nvalue = [1, 5026]\nclass = Malicious"] ;
120 -> 122 ;
123 [label="statement-ifstatement <= 0.5\ngini = 0.011\nsamples = 173\nvalue = [1, 172]\nclass = Malicious"] ;
122 -> 123 ;
124 [label="gini = 0.0\nsamples = 1\nvalue = [1, 0]\nclass = Benign"] ;
123 -> 124 ;
125 [label="gini = 0.0\nsamples = 172\nvalue = [0, 172]\nclass = Malicious"] ;
123 -> 125 ;
126 [label="gini = 0.0\nsamples = 4854\nvalue = [0, 4854]\nclass = Malicious"] ;
122 -> 126 ;
127 [label="gini = 0.0\nsamples = 3\nvalue = [3, 0]\nclass = Benign"] ;
119 -> 127 ;
128 [label="do_for_while_statement-expressionsequence <= 0.5\ngini = 0.245\nsamples = 10798\nvalue = [9253, 1545]\nclass = Benign"] ;
0 -> 128 [labeldistance=2.5, labelangle=-45, headlabel="False"] ;
129 [label="eos-finallyproduction <= 0.5\ngini = 0.006\nsamples = 9245\nvalue = [9216, 29]\nclass = Benign"] ;
128 -> 129 ;
130 [label="literal-arguments <= 0.5\ngini = 0.001\nsamples = 9220\nvalue = [9216, 4]\nclass = Benign"] ;
129 -> 130 ;
131 [label="gini = 0.0\nsamples = 9205\nvalue = [9205, 0]\nclass = Benign"] ;
130 -> 131 ;
132 [label="literal-expressionsequence <= 0.5\ngini = 0.391\nsamples = 15\nvalue = [11, 4]\nclass = Benign"] ;
130 -> 132 ;
133 [label="gini = 0.0\nsamples = 11\nvalue = [11, 0]\nclass = Benign"] ;
132 -> 133 ;
134 [label="gini = 0.0\nsamples = 4\nvalue = [0, 4]\nclass = Malicious"] ;
132 -> 134 ;
135 [label="gini = 0.0\nsamples = 25\nvalue = [0, 25]\nclass = Malicious"] ;
129 -> 135 ;
136 [label="objectliteral-eos <= 0.5\ngini = 0.047\nsamples = 1553\nvalue = [37, 1516]\nclass = Malicious"] ;
128 -> 136 ;
137 [label="literal-expressionsequence <= 0.5\ngini = 0.007\nsamples = 1520\nvalue = [5, 1515]\nclass = Malicious"] ;
136 -> 137 ;
138 [label="catchproduction-block <= 0.5\ngini = 0.5\nsamples = 10\nvalue = [5, 5]\nclass = Benign"] ;
137 -> 138 ;
139 [label="gini = 0.0\nsamples = 5\nvalue = [5, 0]\nclass = Benign"] ;
138 -> 139 ;
140 [label="gini = 0.0\nsamples = 5\nvalue = [0, 5]\nclass = Malicious"] ;
138 -> 140 ;
141 [label="gini = 0.0\nsamples = 1510\nvalue = [0, 1510]\nclass = Malicious"] ;
137 -> 141 ;
142 [label="arguments-expressionsequence <= 0.5\ngini = 0.059\nsamples = 33\nvalue = [32, 1]\nclass = Benign"] ;
136 -> 142 ;
143 [label="gini = 0.0\nsamples = 32\nvalue = [32, 0]\nclass = Benign"] ;
142 -> 143 ;
144 [label="gini = 0.0\nsamples = 1\nvalue = [0, 1]\nclass = Malicious"] ;
142 -> 144 ;
}
