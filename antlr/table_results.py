from collections import OrderedDict

def make_everything(file, plot_save_folder, table_save_folder):

	# {'N-Gram': {'Algorithm' : {'Feature': Value}}}
	results = OrderedDict()

	file = '/home/drc/Desktop/Research/grammar_malware_analysis/antlr/results/final_results/super_trimmed_feature_selected.txt'
	plot_save_folder = '/home/drc/Desktop/Research/grammar_malware_analysis/antlr/plots/super_trimmed_feature_selected'

	with open(file, 'r') as f:
		for line in f:
			if line.startswith('Algorithm'):
				try:
					algorithm = line.replace('Algorithm: ', '').strip()
					n_gram = int(next(f).replace('-gram', '').strip())

					line = next(f)
					if line.startswith('Feature Selection Applied'):
						line = next(f)

					k_folds = float(line.replace('K-Folds: ', '').strip())
					total_samples = float(next(f).replace('Total Samples: ', '').strip())
					total_malicious_samples = float(next(f).replace('Total Malicious Samples: ', '').strip())
					total_benign_samples = float(next(f).replace('Total Benign Samples: ', '').strip())
					total_features = float(next(f).replace('Total Features: ', '').strip())
					tp = float(next(f).replace('True Positive: ', '').strip())
					fp = float(next(f).replace('False Positive: ', '').strip())
					tn = float(next(f).replace('True Negative: ', '').strip())
					fn = float(next(f).replace('False Negative: ', '').strip())
					recall = float(next(f).replace('Recall: ', '').strip())
					precision = float(next(f).replace('Precision: ', '').strip())
					f1 = float(next(f).replace('F1 Score: ', '').strip())

					if n_gram not in results:
						results[n_gram] = OrderedDict()

					if algorithm not in results[n_gram]:
						results[n_gram][algorithm] = {
							'K-Folds': [],
							'Total Samples': [],
							'Total Malicious Samples': [],
							'Total Benign Samples': [],
							'Total Features': [],
							'True Positive': [],
							'False Positive': [],
							'True Negative': [],
							'False Negative': [],
							'Recall': [],
							'Precision': [],
							'F1': []}

					results[n_gram][algorithm]['K-Folds'] = k_folds
					results[n_gram][algorithm]['Total Samples'] = total_samples
					results[n_gram][algorithm]['Total Malicious Samples'] = total_malicious_samples
					results[n_gram][algorithm]['Total Benign Samples'] = total_benign_samples
					results[n_gram][algorithm]['Total Features'] = total_features
					results[n_gram][algorithm]['True Positive'] = tp
					results[n_gram][algorithm]['False Positive'] = fp
					results[n_gram][algorithm]['True Negative'] = tn
					results[n_gram][algorithm]['False Negative'] = fn
					results[n_gram][algorithm]['Recall'] = recall
					results[n_gram][algorithm]['Precision'] = precision
					results[n_gram][algorithm]['F1'] = f1
				except:
					pass


	#################### PLOTS ####################
	import matplotlib.pyplot as plt; plt.rcdefaults()
	import numpy as np
	import matplotlib.pyplot as plt

	from statistics import mean

	for n, result in results.items():
		algorithms = []
		recall = []
		precision = []
		f1 = []

		for algorithm, values in result.items():
			algorithms.append(algorithm)
			recall.append(values['Recall'])
			precision.append(values['Precision'])
			f1.append(values['F1'])


		y_pos = np.arange(len(algorithms))

		new_algorithms = []
		for al in algorithms:
			new_algorithms.append(al.replace(' ', '\n'))
		algorithms = new_algorithms

		plt.bar(y_pos, recall, align='center', alpha=0.5)
		plt.xticks(y_pos, algorithms)
		plt.xlabel('Algorithm')
		plt.ylabel('Recall')
		plt.title('{}-Gram Recall'.format(n))
		plt.savefig('{}/{}-gram_recall.pdf'.format(plot_save_folder, n))
		plt.clf()

		plt.bar(y_pos, precision, align='center', alpha=0.5)
		plt.xticks(y_pos, algorithms)
		plt.xlabel('Algorithm')
		plt.ylabel('Precision')
		plt.title('{}-Gram Precision'.format(n))
		plt.savefig('{}/{}-gram_precision.pdf'.format(plot_save_folder, n))
		plt.clf()

		#fig, ax = plt.subplots()

		plt.bar(y_pos, f1, align='center', alpha=0.5)
		plt.xticks(y_pos, algorithms)
		plt.xlabel('Algorithm')
		plt.ylabel('F1 Score')
		plt.title('{}-Gram F1'.format(n))

		'''
		for i, v in enumerate(f1):
			ax.text(i, v + 0.01, '{:.4}'.format(v), color='black', fontweight='bold', va='center')
		'''

		plt.savefig('{}/{}-gram_f1.pdf'.format(plot_save_folder, n))
		plt.clf()
	###############################################


	################### Tables ####################
	# Table making
	table_folder = '/home/drc/Desktop/Research/grammar_malware_analysis/antlr/tables/super_trimmed_feature_selected'

	# Column order:
	col_order = ['Total Features', 'True Positive', 'False Positive', 'True Negative', 'False Negative', 'Recall', 'Precision', 'F1']

	with open(table_save_folder + '/table.txt', 'w') as f:
		f.write('{}\n'.format(col_order))
		for n, result in results.items():
			for algorithm, value, in result.items():
				f.write('{} - {} - {}\n'.format(n, algorithm, value['Total Features']))
				for col in col_order:
					f.write('{} \t& \t'.format(value[col]))
				f.write('\t \\\\\n')
	###############################################





if __name__ == '__main__':
	file = '/home/drc/Desktop/Research/grammar_malware_analysis/antlr/results/final_results/super_trimmed_feature_selected.txt'
	plot_save_folder = '/home/drc/Desktop/Research/grammar_malware_analysis/antlr/plots/super_trimmed_feature_selected'
	table_save_folder = '/home/drc/Desktop/Research/grammar_malware_analysis/antlr/tables/super_trimmed_feature_selected'


	make_everything(file, plot_save_folder, table_save_folder)










