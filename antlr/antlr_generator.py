from sys import argv

def code_generator(name, path):
	replace = [name] * 17
	code = """
import io
import sys
import os

from antlr4 import FileStream, CommonTokenStream, ParseTreeWalker
from antlr4.error.ErrorListener import ErrorListener

from {}.{}Lexer import {}Lexer
from {}.{}Parser import {}Parser
from {}.{}Listener import {}Listener

class {}ErrorListener(ErrorListener):
    def __init__(self):
        f = open(os.devnull, 'w')
        sys.stderr = f
        self.error_count = 0

    def syntaxError(self, recognizer, offendingSymbol, line, column, msg, e):
        self.error_count += 1


class {}ParserHandler:
    def setup(self, path):
        '''Set up parser
        Args:
            path (string): path to file

        Returns:
            parser
        '''
        input = FileStream(path)
        lexer = {}Lexer(input)
        stream = CommonTokenStream(lexer)

        parser = {}Parser(stream)

        self.errorListener = {}ErrorListener()
        parser.addErrorListener(self.errorListener)

        parser.removeParseListeners()

        return parser

    def run_sample(self, path):
        '''Runs the sample through the parser
        Args:
            path (string): path to file

        Returns:
            Dictionary of features with occurrence count if parser completed successfully
            None otherwise
        '''
        parser = self.setup(path)
        tree = parser.file_input()
        listener = {}Listener()
        walker = ParseTreeWalker()
        walker.walk(listener, tree)

        if self.errorListener.error_count != 0:
            return None

        return listener.rule_uses

    def print_tokens(stream):
        # print out the token parsing
        stream.fill()
        print('TOKENS')
        for token in stream.tokens:
            if token.text != '<EOF>':
                type_name = {}Parser.symbolicNames[token.type]
                tabs = 5 - len(type_name) // 4
                sep = '\\t' * tabs
                print('    %s%s%s' % (type_name, sep,
                                      token.text.replace(' ', u'\\u23B5').replace('\\n', u'\\u2936')))



def main(argv):
    parse = {}ParserHandler()
    parse.run_sample(argv[1])

if __name__ == '__main__':
    main(sys.argv)""".format(*replace)
	with open("{}/antlr.py".format(path), 'w') as f:
		f.write(code)


if __name__ == "__main__":
	if len(argv) != 3:
		print("Usage: python3 antlr_generator LANGUAGE_NAME dir_to_save_to/")
		print("Language Name examples: Python3, CPP14")
		exit()

	code_generator(argv[1], argv[2])