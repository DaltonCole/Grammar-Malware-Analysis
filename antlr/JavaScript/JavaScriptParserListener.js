// Generated from JavaScriptParser.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');

// This class defines a complete listener for a parse tree produced by JavaScriptParser.
function JavaScriptParserListener() {
	antlr4.tree.ParseTreeListener.call(this);
	this.dict = {};
	this.dict["Program"] = 0;
	this.dict["SourceElement"] = 0;
	this.dict["Statement"] = 0;
	this.dict["Block"] = 0;
	this.dict["StatementList"] = 0;
	this.dict["VariableStatement"] = 0;
	this.dict["VariableDeclarationList"] = 0;
	this.dict["VariableDeclaration"] = 0;
	this.dict["EmptyStatement"] = 0;
	this.dict["ExpressionStatement"] = 0;
	this.dict["IfStatement"] = 0;
	this.dict["DoStatement"] = 0;
	this.dict["WhileStatement"] = 0;
	this.dict["ForStatement"] = 0;
	this.dict["ForVarStatement"] = 0;
	this.dict["ForInStatement"] = 0;
	this.dict["ForVarInStatement"] = 0;
	this.dict["VarModifier"] = 0;
	this.dict["ContinueStatement"] = 0;
	this.dict["BreakStatement"] = 0;
	this.dict["ReturnStatement"] = 0;
	this.dict["WithStatement"] = 0;
	this.dict["SwitchStatement"] = 0;
	this.dict["CaseBlock"] = 0;
	this.dict["CaseClauses"] = 0;
	this.dict["CaseClause"] = 0;
	this.dict["DefaultClause"] = 0;
	this.dict["LabelledStatement"] = 0;
	this.dict["ThrowStatement"] = 0;
	this.dict["TryStatement"] = 0;
	this.dict["CatchProduction"] = 0;
	this.dict["FinallyProduction"] = 0;
	this.dict["DebuggerStatement"] = 0;
	this.dict["FunctionDeclaration"] = 0;
	this.dict["ClassDeclaration"] = 0;
	this.dict["ClassTail"] = 0;
	this.dict["ClassElement"] = 0;
	this.dict["MethodDefinition"] = 0;
	this.dict["GeneratorMethod"] = 0;
	this.dict["FormalParameterList"] = 0;
	this.dict["FormalParameterArg"] = 0;
	this.dict["LastFormalParameterArg"] = 0;
	this.dict["FunctionBody"] = 0;
	this.dict["SourceElements"] = 0;
	this.dict["ArrayLiteral"] = 0;
	this.dict["ElementList"] = 0;
	this.dict["LastElement"] = 0;
	this.dict["ObjectLiteral"] = 0;
	this.dict["PropertyExpressionAssignment"] = 0;
	this.dict["ComputedPropertyExpressionAssignment"] = 0;
	this.dict["PropertyGetter"] = 0;
	this.dict["PropertySetter"] = 0;
	this.dict["MethodProperty"] = 0;
	this.dict["PropertyShorthand"] = 0;
	this.dict["PropertyName"] = 0;
	this.dict["Arguments"] = 0;
	this.dict["LastArgument"] = 0;
	this.dict["ExpressionSequence"] = 0;
	this.dict["TemplateStringExpression"] = 0;
	this.dict["TernaryExpression"] = 0;
	this.dict["LogicalAndExpression"] = 0;
	this.dict["PreIncrementExpression"] = 0;
	this.dict["ObjectLiteralExpression"] = 0;
	this.dict["InExpression"] = 0;
	this.dict["LogicalOrExpression"] = 0;
	this.dict["NotExpression"] = 0;
	this.dict["PreDecreaseExpression"] = 0;
	this.dict["ArgumentsExpression"] = 0;
	this.dict["ThisExpression"] = 0;
	this.dict["FunctionExpression"] = 0;
	this.dict["UnaryMinusExpression"] = 0;
	this.dict["AssignmentExpression"] = 0;
	this.dict["PostDecreaseExpression"] = 0;
	this.dict["TypeofExpression"] = 0;
	this.dict["InstanceofExpression"] = 0;
	this.dict["UnaryPlusExpression"] = 0;
	this.dict["DeleteExpression"] = 0;
	this.dict["ArrowFunctionExpression"] = 0;
	this.dict["EqualityExpression"] = 0;
	this.dict["BitXOrExpression"] = 0;
	this.dict["SuperExpression"] = 0;
	this.dict["MultiplicativeExpression"] = 0;
	this.dict["BitShiftExpression"] = 0;
	this.dict["ParenthesizedExpression"] = 0;
	this.dict["AdditiveExpression"] = 0;
	this.dict["RelationalExpression"] = 0;
	this.dict["PostIncrementExpression"] = 0;
	this.dict["BitNotExpression"] = 0;
	this.dict["NewExpression"] = 0;
	this.dict["LiteralExpression"] = 0;
	this.dict["ArrayLiteralExpression"] = 0;
	this.dict["MemberDotExpression"] = 0;
	this.dict["ClassExpression"] = 0;
	this.dict["MemberIndexExpression"] = 0;
	this.dict["IdentifierExpression"] = 0;
	this.dict["BitAndExpression"] = 0;
	this.dict["BitOrExpression"] = 0;
	this.dict["AssignmentOperatorExpression"] = 0;
	this.dict["VoidExpression"] = 0;
	this.dict["ArrowFunctionParameters"] = 0;
	this.dict["ArrowFunctionBody"] = 0;
	this.dict["AssignmentOperator"] = 0;
	this.dict["Literal"] = 0;
	this.dict["NumericLiteral"] = 0;
	this.dict["IdentifierName"] = 0;
	this.dict["ReservedWord"] = 0;
	this.dict["Keyword"] = 0;
	this.dict["Getter"] = 0;
	this.dict["Setter"] = 0;
	this.dict["Eos"] = 0;
	return this;
}

JavaScriptParserListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
JavaScriptParserListener.prototype.constructor = JavaScriptParserListener;

// Enter a parse tree produced by JavaScriptParser#program.
JavaScriptParserListener.prototype.enterProgram = function(ctx) {
	this.dict["Program"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#program.
JavaScriptParserListener.prototype.exitProgram = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#sourceElement.
JavaScriptParserListener.prototype.enterSourceElement = function(ctx) {
	this.dict["SourceElement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#sourceElement.
JavaScriptParserListener.prototype.exitSourceElement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#statement.
JavaScriptParserListener.prototype.enterStatement = function(ctx) {
	this.dict["Statement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#statement.
JavaScriptParserListener.prototype.exitStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#block.
JavaScriptParserListener.prototype.enterBlock = function(ctx) {
	this.dict["Block"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#block.
JavaScriptParserListener.prototype.exitBlock = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#statementList.
JavaScriptParserListener.prototype.enterStatementList = function(ctx) {
	this.dict["StatementList"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#statementList.
JavaScriptParserListener.prototype.exitStatementList = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#variableStatement.
JavaScriptParserListener.prototype.enterVariableStatement = function(ctx) {
	this.dict["VariableStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#variableStatement.
JavaScriptParserListener.prototype.exitVariableStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#variableDeclarationList.
JavaScriptParserListener.prototype.enterVariableDeclarationList = function(ctx) {
	this.dict["VariableDeclarationList"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#variableDeclarationList.
JavaScriptParserListener.prototype.exitVariableDeclarationList = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#variableDeclaration.
JavaScriptParserListener.prototype.enterVariableDeclaration = function(ctx) {
	this.dict["VariableDeclaration"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#variableDeclaration.
JavaScriptParserListener.prototype.exitVariableDeclaration = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#emptyStatement.
JavaScriptParserListener.prototype.enterEmptyStatement = function(ctx) {
	this.dict["EmptyStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#emptyStatement.
JavaScriptParserListener.prototype.exitEmptyStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#expressionStatement.
JavaScriptParserListener.prototype.enterExpressionStatement = function(ctx) {
	this.dict["ExpressionStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#expressionStatement.
JavaScriptParserListener.prototype.exitExpressionStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ifStatement.
JavaScriptParserListener.prototype.enterIfStatement = function(ctx) {
	this.dict["IfStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ifStatement.
JavaScriptParserListener.prototype.exitIfStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#DoStatement.
JavaScriptParserListener.prototype.enterDoStatement = function(ctx) {
	this.dict["DoStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#DoStatement.
JavaScriptParserListener.prototype.exitDoStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#WhileStatement.
JavaScriptParserListener.prototype.enterWhileStatement = function(ctx) {
	this.dict["WhileStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#WhileStatement.
JavaScriptParserListener.prototype.exitWhileStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ForStatement.
JavaScriptParserListener.prototype.enterForStatement = function(ctx) {
	this.dict["ForStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ForStatement.
JavaScriptParserListener.prototype.exitForStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ForVarStatement.
JavaScriptParserListener.prototype.enterForVarStatement = function(ctx) {
	this.dict["ForVarStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ForVarStatement.
JavaScriptParserListener.prototype.exitForVarStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ForInStatement.
JavaScriptParserListener.prototype.enterForInStatement = function(ctx) {
	this.dict["ForInStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ForInStatement.
JavaScriptParserListener.prototype.exitForInStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ForVarInStatement.
JavaScriptParserListener.prototype.enterForVarInStatement = function(ctx) {
	this.dict["ForVarInStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ForVarInStatement.
JavaScriptParserListener.prototype.exitForVarInStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#varModifier.
JavaScriptParserListener.prototype.enterVarModifier = function(ctx) {
	this.dict["VarModifier"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#varModifier.
JavaScriptParserListener.prototype.exitVarModifier = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#continueStatement.
JavaScriptParserListener.prototype.enterContinueStatement = function(ctx) {
	this.dict["ContinueStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#continueStatement.
JavaScriptParserListener.prototype.exitContinueStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#breakStatement.
JavaScriptParserListener.prototype.enterBreakStatement = function(ctx) {
	this.dict["BreakStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#breakStatement.
JavaScriptParserListener.prototype.exitBreakStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#returnStatement.
JavaScriptParserListener.prototype.enterReturnStatement = function(ctx) {
	this.dict["ReturnStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#returnStatement.
JavaScriptParserListener.prototype.exitReturnStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#withStatement.
JavaScriptParserListener.prototype.enterWithStatement = function(ctx) {
	this.dict["WithStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#withStatement.
JavaScriptParserListener.prototype.exitWithStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#switchStatement.
JavaScriptParserListener.prototype.enterSwitchStatement = function(ctx) {
	this.dict["SwitchStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#switchStatement.
JavaScriptParserListener.prototype.exitSwitchStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#caseBlock.
JavaScriptParserListener.prototype.enterCaseBlock = function(ctx) {
	this.dict["CaseBlock"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#caseBlock.
JavaScriptParserListener.prototype.exitCaseBlock = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#caseClauses.
JavaScriptParserListener.prototype.enterCaseClauses = function(ctx) {
	this.dict["CaseClauses"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#caseClauses.
JavaScriptParserListener.prototype.exitCaseClauses = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#caseClause.
JavaScriptParserListener.prototype.enterCaseClause = function(ctx) {
	this.dict["CaseClause"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#caseClause.
JavaScriptParserListener.prototype.exitCaseClause = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#defaultClause.
JavaScriptParserListener.prototype.enterDefaultClause = function(ctx) {
	this.dict["DefaultClause"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#defaultClause.
JavaScriptParserListener.prototype.exitDefaultClause = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#labelledStatement.
JavaScriptParserListener.prototype.enterLabelledStatement = function(ctx) {
	this.dict["LabelledStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#labelledStatement.
JavaScriptParserListener.prototype.exitLabelledStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#throwStatement.
JavaScriptParserListener.prototype.enterThrowStatement = function(ctx) {
	this.dict["ThrowStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#throwStatement.
JavaScriptParserListener.prototype.exitThrowStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#tryStatement.
JavaScriptParserListener.prototype.enterTryStatement = function(ctx) {
	this.dict["TryStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#tryStatement.
JavaScriptParserListener.prototype.exitTryStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#catchProduction.
JavaScriptParserListener.prototype.enterCatchProduction = function(ctx) {
	this.dict["CatchProduction"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#catchProduction.
JavaScriptParserListener.prototype.exitCatchProduction = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#finallyProduction.
JavaScriptParserListener.prototype.enterFinallyProduction = function(ctx) {
	this.dict["FinallyProduction"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#finallyProduction.
JavaScriptParserListener.prototype.exitFinallyProduction = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#debuggerStatement.
JavaScriptParserListener.prototype.enterDebuggerStatement = function(ctx) {
	this.dict["DebuggerStatement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#debuggerStatement.
JavaScriptParserListener.prototype.exitDebuggerStatement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#functionDeclaration.
JavaScriptParserListener.prototype.enterFunctionDeclaration = function(ctx) {
	this.dict["FunctionDeclaration"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#functionDeclaration.
JavaScriptParserListener.prototype.exitFunctionDeclaration = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#classDeclaration.
JavaScriptParserListener.prototype.enterClassDeclaration = function(ctx) {
	this.dict["ClassDeclaration"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#classDeclaration.
JavaScriptParserListener.prototype.exitClassDeclaration = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#classTail.
JavaScriptParserListener.prototype.enterClassTail = function(ctx) {
	this.dict["ClassTail"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#classTail.
JavaScriptParserListener.prototype.exitClassTail = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#classElement.
JavaScriptParserListener.prototype.enterClassElement = function(ctx) {
	this.dict["ClassElement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#classElement.
JavaScriptParserListener.prototype.exitClassElement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#methodDefinition.
JavaScriptParserListener.prototype.enterMethodDefinition = function(ctx) {
	this.dict["MethodDefinition"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#methodDefinition.
JavaScriptParserListener.prototype.exitMethodDefinition = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#generatorMethod.
JavaScriptParserListener.prototype.enterGeneratorMethod = function(ctx) {
	this.dict["GeneratorMethod"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#generatorMethod.
JavaScriptParserListener.prototype.exitGeneratorMethod = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#formalParameterList.
JavaScriptParserListener.prototype.enterFormalParameterList = function(ctx) {
	this.dict["FormalParameterList"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#formalParameterList.
JavaScriptParserListener.prototype.exitFormalParameterList = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#formalParameterArg.
JavaScriptParserListener.prototype.enterFormalParameterArg = function(ctx) {
	this.dict["FormalParameterArg"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#formalParameterArg.
JavaScriptParserListener.prototype.exitFormalParameterArg = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#lastFormalParameterArg.
JavaScriptParserListener.prototype.enterLastFormalParameterArg = function(ctx) {
	this.dict["LastFormalParameterArg"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#lastFormalParameterArg.
JavaScriptParserListener.prototype.exitLastFormalParameterArg = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#functionBody.
JavaScriptParserListener.prototype.enterFunctionBody = function(ctx) {
	this.dict["FunctionBody"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#functionBody.
JavaScriptParserListener.prototype.exitFunctionBody = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#sourceElements.
JavaScriptParserListener.prototype.enterSourceElements = function(ctx) {
	this.dict["SourceElements"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#sourceElements.
JavaScriptParserListener.prototype.exitSourceElements = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#arrayLiteral.
JavaScriptParserListener.prototype.enterArrayLiteral = function(ctx) {
	this.dict["ArrayLiteral"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#arrayLiteral.
JavaScriptParserListener.prototype.exitArrayLiteral = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#elementList.
JavaScriptParserListener.prototype.enterElementList = function(ctx) {
	this.dict["ElementList"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#elementList.
JavaScriptParserListener.prototype.exitElementList = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#lastElement.
JavaScriptParserListener.prototype.enterLastElement = function(ctx) {
	this.dict["LastElement"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#lastElement.
JavaScriptParserListener.prototype.exitLastElement = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#objectLiteral.
JavaScriptParserListener.prototype.enterObjectLiteral = function(ctx) {
	this.dict["ObjectLiteral"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#objectLiteral.
JavaScriptParserListener.prototype.exitObjectLiteral = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#PropertyExpressionAssignment.
JavaScriptParserListener.prototype.enterPropertyExpressionAssignment = function(ctx) {
	this.dict["PropertyExpressionAssignment"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#PropertyExpressionAssignment.
JavaScriptParserListener.prototype.exitPropertyExpressionAssignment = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ComputedPropertyExpressionAssignment.
JavaScriptParserListener.prototype.enterComputedPropertyExpressionAssignment = function(ctx) {
	this.dict["ComputedPropertyExpressionAssignment"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ComputedPropertyExpressionAssignment.
JavaScriptParserListener.prototype.exitComputedPropertyExpressionAssignment = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#PropertyGetter.
JavaScriptParserListener.prototype.enterPropertyGetter = function(ctx) {
	this.dict["PropertyGetter"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#PropertyGetter.
JavaScriptParserListener.prototype.exitPropertyGetter = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#PropertySetter.
JavaScriptParserListener.prototype.enterPropertySetter = function(ctx) {
	this.dict["PropertySetter"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#PropertySetter.
JavaScriptParserListener.prototype.exitPropertySetter = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#MethodProperty.
JavaScriptParserListener.prototype.enterMethodProperty = function(ctx) {
	this.dict["MethodProperty"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#MethodProperty.
JavaScriptParserListener.prototype.exitMethodProperty = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#PropertyShorthand.
JavaScriptParserListener.prototype.enterPropertyShorthand = function(ctx) {
	this.dict["PropertyShorthand"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#PropertyShorthand.
JavaScriptParserListener.prototype.exitPropertyShorthand = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#propertyName.
JavaScriptParserListener.prototype.enterPropertyName = function(ctx) {
	this.dict["PropertyName"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#propertyName.
JavaScriptParserListener.prototype.exitPropertyName = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#arguments.
JavaScriptParserListener.prototype.enterArguments = function(ctx) {
	this.dict["Arguments"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#arguments.
JavaScriptParserListener.prototype.exitArguments = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#lastArgument.
JavaScriptParserListener.prototype.enterLastArgument = function(ctx) {
	this.dict["LastArgument"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#lastArgument.
JavaScriptParserListener.prototype.exitLastArgument = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#expressionSequence.
JavaScriptParserListener.prototype.enterExpressionSequence = function(ctx) {
	this.dict["ExpressionSequence"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#expressionSequence.
JavaScriptParserListener.prototype.exitExpressionSequence = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#TemplateStringExpression.
JavaScriptParserListener.prototype.enterTemplateStringExpression = function(ctx) {
	this.dict["TemplateStringExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#TemplateStringExpression.
JavaScriptParserListener.prototype.exitTemplateStringExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#TernaryExpression.
JavaScriptParserListener.prototype.enterTernaryExpression = function(ctx) {
	this.dict["TernaryExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#TernaryExpression.
JavaScriptParserListener.prototype.exitTernaryExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#LogicalAndExpression.
JavaScriptParserListener.prototype.enterLogicalAndExpression = function(ctx) {
	this.dict["LogicalAndExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#LogicalAndExpression.
JavaScriptParserListener.prototype.exitLogicalAndExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#PreIncrementExpression.
JavaScriptParserListener.prototype.enterPreIncrementExpression = function(ctx) {
	this.dict["PreIncrementExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#PreIncrementExpression.
JavaScriptParserListener.prototype.exitPreIncrementExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ObjectLiteralExpression.
JavaScriptParserListener.prototype.enterObjectLiteralExpression = function(ctx) {
	this.dict["ObjectLiteralExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ObjectLiteralExpression.
JavaScriptParserListener.prototype.exitObjectLiteralExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#InExpression.
JavaScriptParserListener.prototype.enterInExpression = function(ctx) {
	this.dict["InExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#InExpression.
JavaScriptParserListener.prototype.exitInExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#LogicalOrExpression.
JavaScriptParserListener.prototype.enterLogicalOrExpression = function(ctx) {
	this.dict["LogicalOrExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#LogicalOrExpression.
JavaScriptParserListener.prototype.exitLogicalOrExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#NotExpression.
JavaScriptParserListener.prototype.enterNotExpression = function(ctx) {
	this.dict["NotExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#NotExpression.
JavaScriptParserListener.prototype.exitNotExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#PreDecreaseExpression.
JavaScriptParserListener.prototype.enterPreDecreaseExpression = function(ctx) {
	this.dict["PreDecreaseExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#PreDecreaseExpression.
JavaScriptParserListener.prototype.exitPreDecreaseExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ArgumentsExpression.
JavaScriptParserListener.prototype.enterArgumentsExpression = function(ctx) {
	this.dict["ArgumentsExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ArgumentsExpression.
JavaScriptParserListener.prototype.exitArgumentsExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ThisExpression.
JavaScriptParserListener.prototype.enterThisExpression = function(ctx) {
	this.dict["ThisExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ThisExpression.
JavaScriptParserListener.prototype.exitThisExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#FunctionExpression.
JavaScriptParserListener.prototype.enterFunctionExpression = function(ctx) {
	this.dict["FunctionExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#FunctionExpression.
JavaScriptParserListener.prototype.exitFunctionExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#UnaryMinusExpression.
JavaScriptParserListener.prototype.enterUnaryMinusExpression = function(ctx) {
	this.dict["UnaryMinusExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#UnaryMinusExpression.
JavaScriptParserListener.prototype.exitUnaryMinusExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#AssignmentExpression.
JavaScriptParserListener.prototype.enterAssignmentExpression = function(ctx) {
	this.dict["AssignmentExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#AssignmentExpression.
JavaScriptParserListener.prototype.exitAssignmentExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#PostDecreaseExpression.
JavaScriptParserListener.prototype.enterPostDecreaseExpression = function(ctx) {
	this.dict["PostDecreaseExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#PostDecreaseExpression.
JavaScriptParserListener.prototype.exitPostDecreaseExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#TypeofExpression.
JavaScriptParserListener.prototype.enterTypeofExpression = function(ctx) {
	this.dict["TypeofExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#TypeofExpression.
JavaScriptParserListener.prototype.exitTypeofExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#InstanceofExpression.
JavaScriptParserListener.prototype.enterInstanceofExpression = function(ctx) {
	this.dict["InstanceofExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#InstanceofExpression.
JavaScriptParserListener.prototype.exitInstanceofExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#UnaryPlusExpression.
JavaScriptParserListener.prototype.enterUnaryPlusExpression = function(ctx) {
	this.dict["UnaryPlusExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#UnaryPlusExpression.
JavaScriptParserListener.prototype.exitUnaryPlusExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#DeleteExpression.
JavaScriptParserListener.prototype.enterDeleteExpression = function(ctx) {
	this.dict["DeleteExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#DeleteExpression.
JavaScriptParserListener.prototype.exitDeleteExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ArrowFunctionExpression.
JavaScriptParserListener.prototype.enterArrowFunctionExpression = function(ctx) {
	this.dict["ArrowFunctionExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ArrowFunctionExpression.
JavaScriptParserListener.prototype.exitArrowFunctionExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#EqualityExpression.
JavaScriptParserListener.prototype.enterEqualityExpression = function(ctx) {
	this.dict["EqualityExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#EqualityExpression.
JavaScriptParserListener.prototype.exitEqualityExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#BitXOrExpression.
JavaScriptParserListener.prototype.enterBitXOrExpression = function(ctx) {
	this.dict["BitXOrExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#BitXOrExpression.
JavaScriptParserListener.prototype.exitBitXOrExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#SuperExpression.
JavaScriptParserListener.prototype.enterSuperExpression = function(ctx) {
	this.dict["SuperExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#SuperExpression.
JavaScriptParserListener.prototype.exitSuperExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#MultiplicativeExpression.
JavaScriptParserListener.prototype.enterMultiplicativeExpression = function(ctx) {
	this.dict["MultiplicativeExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#MultiplicativeExpression.
JavaScriptParserListener.prototype.exitMultiplicativeExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#BitShiftExpression.
JavaScriptParserListener.prototype.enterBitShiftExpression = function(ctx) {
	this.dict["BitShiftExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#BitShiftExpression.
JavaScriptParserListener.prototype.exitBitShiftExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ParenthesizedExpression.
JavaScriptParserListener.prototype.enterParenthesizedExpression = function(ctx) {
	this.dict["ParenthesizedExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ParenthesizedExpression.
JavaScriptParserListener.prototype.exitParenthesizedExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#AdditiveExpression.
JavaScriptParserListener.prototype.enterAdditiveExpression = function(ctx) {
	this.dict["AdditiveExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#AdditiveExpression.
JavaScriptParserListener.prototype.exitAdditiveExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#RelationalExpression.
JavaScriptParserListener.prototype.enterRelationalExpression = function(ctx) {
	this.dict["RelationalExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#RelationalExpression.
JavaScriptParserListener.prototype.exitRelationalExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#PostIncrementExpression.
JavaScriptParserListener.prototype.enterPostIncrementExpression = function(ctx) {
	this.dict["PostIncrementExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#PostIncrementExpression.
JavaScriptParserListener.prototype.exitPostIncrementExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#BitNotExpression.
JavaScriptParserListener.prototype.enterBitNotExpression = function(ctx) {
	this.dict["BitNotExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#BitNotExpression.
JavaScriptParserListener.prototype.exitBitNotExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#NewExpression.
JavaScriptParserListener.prototype.enterNewExpression = function(ctx) {
	this.dict["NewExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#NewExpression.
JavaScriptParserListener.prototype.exitNewExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#LiteralExpression.
JavaScriptParserListener.prototype.enterLiteralExpression = function(ctx) {
	this.dict["LiteralExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#LiteralExpression.
JavaScriptParserListener.prototype.exitLiteralExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ArrayLiteralExpression.
JavaScriptParserListener.prototype.enterArrayLiteralExpression = function(ctx) {
	this.dict["ArrayLiteralExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ArrayLiteralExpression.
JavaScriptParserListener.prototype.exitArrayLiteralExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#MemberDotExpression.
JavaScriptParserListener.prototype.enterMemberDotExpression = function(ctx) {
	this.dict["MemberDotExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#MemberDotExpression.
JavaScriptParserListener.prototype.exitMemberDotExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#ClassExpression.
JavaScriptParserListener.prototype.enterClassExpression = function(ctx) {
	this.dict["ClassExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#ClassExpression.
JavaScriptParserListener.prototype.exitClassExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#MemberIndexExpression.
JavaScriptParserListener.prototype.enterMemberIndexExpression = function(ctx) {
	this.dict["MemberIndexExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#MemberIndexExpression.
JavaScriptParserListener.prototype.exitMemberIndexExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#IdentifierExpression.
JavaScriptParserListener.prototype.enterIdentifierExpression = function(ctx) {
	this.dict["IdentifierExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#IdentifierExpression.
JavaScriptParserListener.prototype.exitIdentifierExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#BitAndExpression.
JavaScriptParserListener.prototype.enterBitAndExpression = function(ctx) {
	this.dict["BitAndExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#BitAndExpression.
JavaScriptParserListener.prototype.exitBitAndExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#BitOrExpression.
JavaScriptParserListener.prototype.enterBitOrExpression = function(ctx) {
	this.dict["BitOrExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#BitOrExpression.
JavaScriptParserListener.prototype.exitBitOrExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#AssignmentOperatorExpression.
JavaScriptParserListener.prototype.enterAssignmentOperatorExpression = function(ctx) {
	this.dict["AssignmentOperatorExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#AssignmentOperatorExpression.
JavaScriptParserListener.prototype.exitAssignmentOperatorExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#VoidExpression.
JavaScriptParserListener.prototype.enterVoidExpression = function(ctx) {
	this.dict["VoidExpression"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#VoidExpression.
JavaScriptParserListener.prototype.exitVoidExpression = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#arrowFunctionParameters.
JavaScriptParserListener.prototype.enterArrowFunctionParameters = function(ctx) {
	this.dict["ArrowFunctionParameters"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#arrowFunctionParameters.
JavaScriptParserListener.prototype.exitArrowFunctionParameters = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#arrowFunctionBody.
JavaScriptParserListener.prototype.enterArrowFunctionBody = function(ctx) {
	this.dict["ArrowFunctionBody"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#arrowFunctionBody.
JavaScriptParserListener.prototype.exitArrowFunctionBody = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#assignmentOperator.
JavaScriptParserListener.prototype.enterAssignmentOperator = function(ctx) {
	this.dict["AssignmentOperator"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#assignmentOperator.
JavaScriptParserListener.prototype.exitAssignmentOperator = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#literal.
JavaScriptParserListener.prototype.enterLiteral = function(ctx) {
	this.dict["Literal"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#literal.
JavaScriptParserListener.prototype.exitLiteral = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#numericLiteral.
JavaScriptParserListener.prototype.enterNumericLiteral = function(ctx) {
	this.dict["NumericLiteral"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#numericLiteral.
JavaScriptParserListener.prototype.exitNumericLiteral = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#identifierName.
JavaScriptParserListener.prototype.enterIdentifierName = function(ctx) {
	this.dict["IdentifierName"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#identifierName.
JavaScriptParserListener.prototype.exitIdentifierName = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#reservedWord.
JavaScriptParserListener.prototype.enterReservedWord = function(ctx) {
	this.dict["ReservedWord"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#reservedWord.
JavaScriptParserListener.prototype.exitReservedWord = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#keyword.
JavaScriptParserListener.prototype.enterKeyword = function(ctx) {
	this.dict["Keyword"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#keyword.
JavaScriptParserListener.prototype.exitKeyword = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#getter.
JavaScriptParserListener.prototype.enterGetter = function(ctx) {
	this.dict["Getter"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#getter.
JavaScriptParserListener.prototype.exitGetter = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#setter.
JavaScriptParserListener.prototype.enterSetter = function(ctx) {
	this.dict["Setter"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#setter.
JavaScriptParserListener.prototype.exitSetter = function(ctx) {
};


// Enter a parse tree produced by JavaScriptParser#eos.
JavaScriptParserListener.prototype.enterEos = function(ctx) {
	this.dict["Eos"] += 1;
};

// Exit a parse tree produced by JavaScriptParser#eos.
JavaScriptParserListener.prototype.exitEos = function(ctx) {
};



exports.JavaScriptParserListener = JavaScriptParserListener;