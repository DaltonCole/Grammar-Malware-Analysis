


results = {}

with open('./results/results_full_features.txt', 'r') as f:
	for line in f:
		if line.startswith('Algorithm'):
			try:
				algorithm = line.replace('Algorithm: ', '').strip()
				n_gram = int(next(f).replace('-gram', '').strip())

				line = next(f)
				if line.startswith('Feature Selection Applied'):
					line = next(f)

				k_folds = float(line.replace('K-Folds: ', '').strip())
				total_samples = float(next(f).replace('Total Samples: ', '').strip())
				total_malicious_samples = float(next(f).replace('Total Malicious Samples: ', '').strip())
				total_benign_samples = float(next(f).replace('Total Benign Samples: ', '').strip())
				total_features = float(next(f).replace('Total Features: ', '').strip())
				tp = float(next(f).replace('True Positive: ', '').strip())
				fp = float(next(f).replace('False Positive: ', '').strip())
				tn = float(next(f).replace('True Negative: ', '').strip())
				fn = float(next(f).replace('False Negative: ', '').strip())
				recall = float(next(f).replace('Recall: ', '').strip())
				precision = float(next(f).replace('Precision: ', '').strip())
				f1 = float(next(f).replace('F1 Score: ', '').strip())

				if algorithm not in results:
					results[algorithm] = {
						'N-Gram': [],
						'K-Folds': [],
						'Total Samples': [],
						'Total Malicious Samples': [],
						'Total Benign Samples': [],
						'Total Features': [],
						'True Positive': [],
						'False Positive': [],
						'True Negative': [],
						'False Negative': [],
						'Recall': [],
						'Precision': [],
						'F1': []}
				results[algorithm]['N-Gram'].append(n_gram)
				results[algorithm]['K-Folds'].append(k_folds)
				results[algorithm]['Total Samples'].append(total_samples)
				results[algorithm]['Total Malicious Samples'].append(total_malicious_samples)
				results[algorithm]['Total Benign Samples'].append(total_benign_samples)
				results[algorithm]['Total Features'].append(total_features)
				results[algorithm]['True Positive'].append(tp)
				results[algorithm]['False Positive'].append(fp)
				results[algorithm]['True Negative'].append(tn)
				results[algorithm]['False Negative'].append(fn)
				results[algorithm]['Recall'].append(recall)
				results[algorithm]['Precision'].append(precision)
				results[algorithm]['F1'].append(f1)
			except:
				pass


import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np
import matplotlib.pyplot as plt

from statistics import mean

for n in range(1, 4):
	algorithms = []
	recall = []
	precision = []
	f1 = []

	for algorithm, values in results.items():
		
		r = []
		p = []
		f = []
		for index, gram in enumerate(values['N-Gram']):
			if gram == n:
				r.append(values['Recall'][index])
				p.append(values['Precision'][index])
				f.append(values['F1'][index])
		'''
		recall.append(sum(r) / len(r))
		precision.append(sum(p) / len(p))
		f1.append(sum(f) / len(f))
		'''
		try:
			recall.append(max(r))
			precision.append(max(p))
			f1.append(max(f))
			algorithms.append(algorithm)
		except:
			pass

	y_pos = np.arange(len(algorithms))

	fig, ax = plt.subplots() 

	plt.bar(y_pos, recall, align='center', alpha=0.5)
	plt.xticks(y_pos, algorithms)
	plt.xlabel('Algorithm')
	plt.ylabel('Recall')
	plt.title('{}-Gram Recall'.format(n))

	for i, v in enumerate(recall):
		ax.text(v, i + .25, str(v), color='blue', fontweight='bold')

	plt.show()
	plt.clf()

	plt.bar(y_pos, precision, align='center', alpha=0.5)
	plt.xticks(y_pos, algorithms)
	plt.xlabel('Algorithm')
	plt.ylabel('Precision')
	plt.title('{}-Gram Precision'.format(n))
	plt.show()
	plt.clf()

	plt.bar(y_pos, f1, align='center', alpha=0.5)
	plt.xticks(y_pos, algorithms)
	plt.xlabel('Algorithm')
	plt.ylabel('F1 Score')
	plt.title('{}-Gram F1'.format(n))
	plt.show()
	plt.clf()