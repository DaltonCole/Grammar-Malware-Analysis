
import io
import sys
import os

from antlr4 import FileStream, CommonTokenStream, ParseTreeWalker
from antlr4.error.ErrorListener import ErrorListener

try:
	from C.CLexer import CLexer
	from C.CParser import CParser
	from C.CListener import CListener
except:
	pass

try:
	from CLexer import CLexer
	from CParser import CParser
	from CListener import CListener
except:
	pass

class CErrorListener(ErrorListener):
	def __init__(self):
		f = open(os.devnull, 'w')
		sys.stderr = f
		self.error_count = 0

	def syntaxError(self, recognizer, offendingSymbol, line, column, msg, e):
		self.error_count += 1


class CParserHandler:
	def setup(self, path):
		'''Set up parser
		Args:
			path (string): path to file

		Returns:
			parser
		'''
		input = FileStream(path)
		lexer = CLexer(input)
		stream = CommonTokenStream(lexer)

		parser = CParser(stream)

		self.errorListener = CErrorListener()
		parser.addErrorListener(self.errorListener)

		parser.removeParseListeners()

		return parser

	def run_sample(self, path):
		'''Runs the sample through the parser
		Args:
			path (string): path to file

		Returns:
			Dictionary of features with occurrence count if parser completed successfully
			None otherwise
		'''
		parser = self.setup(path)
		tree = parser.compilationUnit()
		listener = CListener()
		walker = ParseTreeWalker()
		walker.walk(listener, tree)

		if self.errorListener.error_count != 0:
			return None

		return listener.rule_uses

	def print_tokens(self, stream):
		# print out the token parsing
		stream.fill()
		print('TOKENS')
		for token in stream.tokens:
			if token.text != '<EOF>':
				type_name = CParser.symbolicNames[token.type]
				tabs = 5 - len(type_name) // 4
				sep = '\t' * tabs
				print('    %s%s%s' % (type_name, sep,
									  token.text.replace(' ', u'\u23B5').replace('\n', u'\u2936')))



def main(argv):
	parse = CParserHandler()
	parse.run_sample(argv[1])

if __name__ == '__main__':
	main(sys.argv)