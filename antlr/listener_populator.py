from sys import argv


def main(file):
	init_string = """    def __init__(self):
        super()
        self.rule_uses = {}"""

	# Get rule names from file
	rules = []
	with open(file, 'r') as f:
		for line in f:
			if "    def enter" in line and "(self, ctx:" in line and "Context):" in line:
				# Get rule name
				rule_name = (((line.split("enter"))[1]).split("("))[0]
				rules.append(rule_name)

	# Initialize rule names to 0 in init_string
	for rule in rules:
		init_string += ("\n        self.rule_uses['{}'] = 0".format(rule))
	init_string += "\n\n"

	# String to replace file with
	new_file = ''
	# Fill new_file with proper info
	with open(file, 'r') as f:
		for line in f:
			# Add __init__
			if "class" in line and "Listener(ParseTreeListener):" in line:
				new_file += line + init_string
			# enter rules
			elif "    def enter" in line and "(self, ctx:" in line and "Context):" in line:
				# Get rule name
				rule_name = (((line.split("enter"))[1]).split("("))[0]
				new_file += line + ("        self.rule_uses['{}'] += 1\n".format(rule_name))
			else:
				new_file += line

	with open(file, 'w') as f:
		f.write(new_file)


# NOTE: NEED TO ADD ALL RULES TO self.rules_uses
if __name__ == "__main__":
	if len(argv) != 2:
		print("Usage: python3 listener_populator name_of_Listerner.py")
		exit()

	main(argv[1])